party.mat.final<- party.mat[,-1]
along.mat<- matrix(0, nrow=1074, ncol=4)
colnames(along.mat)<- 	along
for(z in 1:nrow(along.mat)){
along.mat[z,which(colnames(along.mat)==svdat$cond.alongWith[z])]<- 1
}
along.mat.final<- along.mat[,-1]
=======
treat<- treats #line 448 of rep code
>>>>>>> bf7998bd49f5b12b9a6b3cbe6c67a57a4f70aeca
treats<- cbind(type.mat.final, num.mat.final[,1], stage.mat.final[,1:2],party.mat.final[,1],
along.mat.final[,1:2], type.mat.final[,1:5]*num.mat.final[,1], type.mat.final[,1:5]*stage.mat.final[,1],
type.mat.final[,1:5]*stage.mat.final[,2], type.mat.final[,1:5]*party.mat.final[,1], type.mat.final[,1:5]*along.mat.final[,1],
type.mat.final[,1:5]*along.mat.final[,2], num.mat.final[,1]*stage.mat.final[,1], num.mat.final[,1]*stage.mat.final[,2],
num.mat.final[,1]*party.mat.final[,1], num.mat.final[,1]*along.mat.final[,1], num.mat.final[,1]*along.mat.final[,2],
stage.mat.final[,1:2]*party.mat.final[,1], stage.mat.final[,1:2]*along.mat.final[,1],
stage.mat.final[,1:2]*along.mat.final[,2], party.mat.final[,1]*along.mat.final[,1], party.mat.final[,1]*along.mat.final[,2] )
<<<<<<< HEAD
treat<- treats #line 448 of rep code
### Defining the X variable
covs<- cbind(dem, rep, lib, cons) #line 373 of rep code
X <- covs #line 432 of repcode
Xfull <- model.matrix(~X*treat)
## line 391 of rep code
#Defining the Y variable
#line 432 of rep code
Y<- approve_bi<- ifelse(svdat$approval<3, 1, 0) #line 292 of rep code
covstest_1 <- covs[c(1:107),]
covstest_2<- covs[c(108:215),]
covstest_3<- covs[c(216:323),]
covstest_4<- covs[c(324:431),]
covstest_5<- covs[c(432:539),]
covstest_6<- covs[c(540:647),]
covstest_7<- covs[c(648:755),]
covstest_8<- covs[c(756:863),]
covstest_9<- covs[c(864:971),]
covstest_10<- covs[c(972:1074),]
covsfull_1 <- covs[-covstest_1,]
covsfull_2 <- covs[-covstest_2,]
covsfull_3 <- covs[-covstest_3,]
covsfull_4 <- covs[-covstest_4,]
covsfull_5 <- covs[-covstest_5,]
covsfull_6 <- covs[-covstest_6,]
covsfull_7 <- covs[-covstest_7,]
covsfull_8 <- covs[-covstest_8,]
covsfull_9 <- covs[-covstest_9,]
covsfull_10 <- covs[-covstest_10,]
####def of 1/10 for treat
treattest_1 <- treat[c(1:107),]
treattest_2<- treat[c(108:215),]
treattest_3<- treat[c(216:323),]
treattest_4<-treat[c(324:431),]
treattest_5<- treat[c(432:539),]
treattest_6<- treat[c(540:647),]
treattest_7<- treat[c(648:755),]
treattest_8<- treat[c(756:863),]
treattest_9<- treat[c(864:971),]
treattest_10<- treat[c(972:1074),]
treatfull_1 <-treat[-treattest_1,]
treatfull_2 <- treat[-treattest_2,]
treatfull_3 <- treat[-treattest_3,]
treatfull_4 <- treat[-treattest_4,]
treatfull_5 <- treat[-treattest_5,]
treatfull_6 <- treat[-treattest_6,]
treatfull_7 <- treat[-treattest_7,]
treatfull_8 <- treat[-treattest_8,]
treatfull_9 <- treat[-treattest_9,]
treatfull_10 <- treat[-treattest_10,]
Yfull_1<- ifelse(svdat[-c(1:107),]$approval<3, 1, 0)
Yfull_2<- ifelse(svdat[-c(108:215),]$approval<3, 1, 0)
Yfull_3<- ifelse(svdat[-c(216:323),]$approval<3, 1, 0)
Yfull_4<- ifelse(svdat[-c(324:431),]$approval<3, 1, 0)
Yfull_5<- ifelse(svdat[-c(432:539),]$approval<3, 1, 0)
Yfull_6<- ifelse(svdat[-c(540:647),]$approval<3, 1, 0)
Yfull_7<- ifelse(svdat[-c(648:755),]$approval<3, 1, 0)
Yfull_8<- ifelse(svdat[-c(756:863),]$approval<3, 1, 0)
Yfull_9<- ifelse(svdat[-c(864:971),]$approval<3, 1, 0)
Yfull_10<- ifelse(svdat[-c(972:1074),]$approval<3, 1, 0)
Xfull <- model.matrix(~covs*treat)
Xfull_1 <-model.matrix(~covsfull_1*treatfull_1)
xtest<- model.matrix(~covstest_1*treattest_1)
fit8<- bart(x.train=Xfull, y.train=factor(Y), x.test=Xtfull, ndpost=1000, nskip=500, usequants=T)
library(BayesTree)
fit8<- bart(x.train=Xfull, y.train=factor(Y), x.test=Xtfull, ndpost=1000, nskip=500, usequants=T)
Xfull<-Xtfull <- model.matrix(~covs*treat)
fit8<- bart(x.train=Xfull, y.train=factor(Y), x.test=Xtfull, ndpost=1000, nskip=500, usequants=T)
nrow(Yfull_1)
Yfull_1<- ifelse(svdat[-c(1:107),]$approval<3, 1, 0)
nrow(Yfull_1)
covstest_1 <- covs[c(0:107),]
treattest_1 <- treat[c(0:107),]
Yfull_1<- ifelse(svdat[-c(0:107),]$approval<3, 1, 0)
covstest_1 <- covs[c(0:107),]
covstest_2<- covs[c(108:215),]
covstest_3<- covs[c(216:323),]
covstest_4<- covs[c(324:431),]
covstest_5<- covs[c(432:539),]
covstest_6<- covs[c(540:647),]
covstest_7<- covs[c(648:755),]
covstest_8<- covs[c(756:863),]
covstest_9<- covs[c(864:971),]
covstest_10<- covs[c(972:1074),]
covsfull_1 <- covs[-covstest_1,]
covsfull_2 <- covs[-covstest_2,]
covsfull_3 <- covs[-covstest_3,]
covsfull_4 <- covs[-covstest_4,]
covsfull_5 <- covs[-covstest_5,]
covsfull_6 <- covs[-covstest_6,]
covsfull_7 <- covs[-covstest_7,]
covsfull_8 <- covs[-covstest_8,]
covsfull_9 <- covs[-covstest_9,]
covsfull_10 <- covs[-covstest_10,]
treattest_1 <- treat[c(0:107),]
treattest_2<- treat[c(108:215),]
treattest_3<- treat[c(216:323),]
treattest_4<-treat[c(324:431),]
treattest_5<- treat[c(432:539),]
treattest_6<- treat[c(540:647),]
treattest_7<- treat[c(648:755),]
treattest_8<- treat[c(756:863),]
treattest_9<- treat[c(864:971),]
treattest_10<- treat[c(972:1074),]
treatfull_1 <-treat[-treattest_1,]
treatfull_2 <- treat[-treattest_2,]
treatfull_3 <- treat[-treattest_3,]
treatfull_4 <- treat[-treattest_4,]
treatfull_5 <- treat[-treattest_5,]
treatfull_6 <- treat[-treattest_6,]
treatfull_7 <- treat[-treattest_7,]
treatfull_8 <- treat[-treattest_8,]
treatfull_9 <- treat[-treattest_9,]
treatfull_10 <- treat[-treattest_10,]
Yfull_1<- ifelse(svdat[-c(0:107),]$approval<3, 1, 0)
Yfull_2<- ifelse(svdat[-c(108:215),]$approval<3, 1, 0)
Yfull_3<- ifelse(svdat[-c(216:323),]$approval<3, 1, 0)
Yfull_4<- ifelse(svdat[-c(324:431),]$approval<3, 1, 0)
Yfull_5<- ifelse(svdat[-c(432:539),]$approval<3, 1, 0)
Yfull_6<- ifelse(svdat[-c(540:647),]$approval<3, 1, 0)
Yfull_7<- ifelse(svdat[-c(648:755),]$approval<3, 1, 0)
Yfull_8<- ifelse(svdat[-c(756:863),]$approval<3, 1, 0)
Yfull_9<- ifelse(svdat[-c(864:971),]$approval<3, 1, 0)
Yfull_10<- ifelse(svdat[-c(972:1074),]$approval<3, 1, 0)
Xfull_1 <-model.matrix(~covsfull_1*treatfull_1)
xtest_1<- model.matrix(~covstest_1*treattest_1)
fit8<- bart(x.train=Xfull_1, y.train=factor(Yfull_1), x.test=xtest_1, ndpost=1000, nskip=500, usequants=T)
covsfull_1
treatfull_1
covs
treat
covstest_1 <- covs[c(0:107),]
covsfull_1 <- covs[-covstest_1,]
treattest_1 <- treat[c(0:107),]
treatfull_1 <-treat[-treattest_1,]
xtest_1<- model.matrix(~covstest_1*treattest_1)
fit8<- bart(x.train=Xfull_1, y.train=factor(Yfull_1), x.test=xtest_1, ndpost=1000, nskip=500, usequants=T)
=======
library(glmnet)
fit1<- cv.glmnet(y = Y, x= Xfull, alpha=1, family='binomial', type='mse')
fit1<- cv.glmnet(y = Y, x= Xfull, alpha=1, family='binomial', type='mse')
approve_bi <- y #line 432 of rep code
approve_bi<- ifelse(svdat$approval<3, 1, 0) #line 292 of rep code
approve_bi <- y #line 432 of rep code
approve_bi <- y #line 432 of rep code
FIY <- Y
Xfull <- model.matrix(~X*treat)
Xtfull <- model.matrix(~Xt*treatt) #line 56 of SLF
rm(list=ls(all=TRUE))
dem<- ifelse(svdat$pid3l=='Dem', 1, 0)  #line 366-369 of rep code
getwd()
load(Het_Experiment.R)
load(Het_Experiment.RData)
load("Het_Experiment.RData")
dem<- ifelse(svdat$pid3l=='Dem', 1, 0)  #line 366-369 of rep code
dem[which(is.na(dem))]<- 0
rep<- ifelse(svdat$pid3l=='Rep', 1, 0)
rep[which(is.na(rep))]<- 0
cons<- ifelse(svdat$ideo3<3, 1, 0) #line 230-231 of rep code
lib<- ifelse(svdat$ideo3==4|svdat$ideo3==5, 1, 0)
lib[which(is.na(lib))]<- 0 #line 370-371 of rep code
cons[which(is.na(cons))]<- 0
treat<- treats #line 448 of rep code
type.mat<- matrix(0, nrow = 1074, ncol=7)
colnames(type.mat)<- sort(unique(as.character(svdat$cond.type)))
for(z in 1:nrow(type.mat)){
type.mat[z,which(colnames(type.mat)==svdat$cond.type[z])]<- 1}
treat<- treats #line 448 of rep code
type.mat<- matrix(0, nrow = 1074, ncol=7)
colnames(type.mat)<- sort(unique(as.character(svdat$cond.type)))
for(z in 1:nrow(type.mat)){
type.mat[z,which(colnames(type.mat)==svdat$cond.type[z])]<- 1}
type.mat.final<- type.mat[,-1]
num.mat<- matrix(0, nrow=1074, ncol=3)
colnames(num.mat)<- number
for(z in 1:nrow(num.mat)){
num.mat[z,which(colnames(num.mat)==svdat$cond.money[z])]<- 1
}
num.mat.final<- num.mat[,-1]
stage.mat<- matrix(0, nrow=1074, ncol=4)
colnames(stage.mat)<- request
for(z in 1:nrow(stage.mat)){
stage.mat[z,which(colnames(stage.mat)==svdat$cond.stage[z])]<- 1
}
stage.mat.final<- stage.mat[,-1]
party.mat<- matrix(0, nrow=1074, ncol=3)
colnames(party.mat)<- party
for(z in 1:nrow(party.mat)){
party.mat[z, which(colnames(party.mat)==svdat$cond.party[z])]<- 1
}
party.mat.final<- party.mat[,-1]
along.mat<- matrix(0, nrow=1074, ncol=4)
colnames(along.mat)<- 	along
for(z in 1:nrow(along.mat)){
along.mat[z,which(colnames(along.mat)==svdat$cond.alongWith[z])]<- 1
}
along.mat.final<- along.mat[,-1]
types<- sort(unique(as.character(svdat$cond.type)))
type.num<- match(svdat$cond.type, types)
number<- c('control', '$20 million', '$50 thousand')
amount.num<- match(svdat$cond.money, number)
request<- c('control', 'requested', 'secured', 'will request')
stage.num<- match(svdat$cond.stage, request)
party<- c('control', 'a Republican', 'a Democrat')
party.num<- match(svdat$cond.party, party)
along<- c('control', 'alone', 'w/ Rep', 'w/ Dem')
along.num<- match(svdat$cond.alongWith, along)
treats<- cbind(type.mat.final, num.mat.final[,1], stage.mat.final[,1:2],party.mat.final[,1],
along.mat.final[,1:2], type.mat.final[,1:5]*num.mat.final[,1], type.mat.final[,1:5]*stage.mat.final[,1],
type.mat.final[,1:5]*stage.mat.final[,2], type.mat.final[,1:5]*party.mat.final[,1], type.mat.final[,1:5]*along.mat.final[,1],
type.mat.final[,1:5]*along.mat.final[,2], num.mat.final[,1]*stage.mat.final[,1], num.mat.final[,1]*stage.mat.final[,2],
num.mat.final[,1]*party.mat.final[,1], num.mat.final[,1]*along.mat.final[,1], num.mat.final[,1]*along.mat.final[,2],
stage.mat.final[,1:2]*party.mat.final[,1], stage.mat.final[,1:2]*along.mat.final[,1],
stage.mat.final[,1:2]*along.mat.final[,2], party.mat.final[,1]*along.mat.final[,1], party.mat.final[,1]*along.mat.final[,2] )
treats<- cbind(type.mat.final, num.mat.final[,1], stage.mat.final[,1:2],party.mat.final[,1],
along.mat.final[,1:2], type.mat.final[,1:5]*num.mat.final[,1], type.mat.final[,1:5]*stage.mat.final[,1],
type.mat.final[,1:5]*stage.mat.final[,2], type.mat.final[,1:5]*party.mat.final[,1], type.mat.final[,1:5]*along.mat.final[,1],
type.mat.final[,1:5]*along.mat.final[,2], num.mat.final[,1]*stage.mat.final[,1], num.mat.final[,1]*stage.mat.final[,2],
num.mat.final[,1]*party.mat.final[,1], num.mat.final[,1]*along.mat.final[,1], num.mat.final[,1]*along.mat.final[,2],
stage.mat.final[,1:2]*party.mat.final[,1], stage.mat.final[,1:2]*along.mat.final[,1],
stage.mat.final[,1:2]*along.mat.final[,2], party.mat.final[,1]*along.mat.final[,1], party.mat.final[,1]*along.mat.final[,2] )
Y<- approve_bi<- ifelse(svdat$approval<3, 1, 0) #line 292 of rep code
Xfull <- model.matrix(~X*treat)
X <- covs #line 432 of repcode
covs<- cbind(dem, rep, lib, cons) #line 373 of rep code
X <- covs #line 432 of repcode
Xfull <- model.matrix(~X*treat)
treat<- treats #line 448 of rep code
Xfull <- model.matrix(~X*treat)
X <- covs #line 432 of repcode
covs<- cbind(dem, rep, lib, cons) #line 373 of rep code
install.packages("glmnet")
library(glmnet)
install.packages("glmnet")
fit1<- cv.glmnet(y = Y, x= Xfull, alpha=1, family='binomial', type='mse')
install.packages("glmnet")
fit2<- cv.glmnet(y = Y, x= Xfull, alpha=0.5, family='binomial', type='mse')
fit3<- cv.glmnet(y = Y, x= Xfull, alpha=0.15, family='binomial', type='mse')
fit4<- cv.glmnet(y = Y, x= Xfull, alpha=0, family='binomial', type='mse')
library(KRLS)
fit11<- krls(X = Xfull[,-1], y = Y, derivative=F)
library(KRLS)
fit11<- krls(X = Xfull[,-1], y = Y, derivative=F)
fit5 <- FindIt(FIY,X.c=Xstd, treat2, type='multiple',
scale.c= SDsToRescaleX,
search.lambdas=TRUE,
fit.glmnet=TRUE,wts=1) }
install.packages("arm")
library(arm)
fit6<- bayesglm(Y~Xfull-1, family=binomial(link=logit))
install.packages("mboost")
install.packages("GAMBoost")
library(mboost)
library(GAMBoost)
fit7<- GLMBoost(Xfull[,-1],Y,penalty= 100,stepno=100,  trace = T,  family=binomial())
install.packages("mboost")
install.packages("mboost")
library(mboost)
library(GAMBoost)
fit7<- GLMBoost(Xfull[,-1],Y,penalty= 100,stepno=100,  trace = T,  family=binomial())
>>>>>>> bf7998bd49f5b12b9a6b3cbe6c67a57a4f70aeca
treats<- cbind(type.mat.final, num.mat.final[,1], stage.mat.final[,1:2],party.mat.final[,1],
along.mat.final[,1:2], type.mat.final[,1:5]*num.mat.final[,1], type.mat.final[,1:5]*stage.mat.final[,1],
type.mat.final[,1:5]*stage.mat.final[,2], type.mat.final[,1:5]*party.mat.final[,1], type.mat.final[,1:5]*along.mat.final[,1],
type.mat.final[,1:5]*along.mat.final[,2], num.mat.final[,1]*stage.mat.final[,1], num.mat.final[,1]*stage.mat.final[,2],
num.mat.final[,1]*party.mat.final[,1], num.mat.final[,1]*along.mat.final[,1], num.mat.final[,1]*along.mat.final[,2],
stage.mat.final[,1:2]*party.mat.final[,1], stage.mat.final[,1:2]*along.mat.final[,1],
stage.mat.final[,1:2]*along.mat.final[,2], party.mat.final[,1]*along.mat.final[,1], party.mat.final[,1]*along.mat.final[,2] )
load("~/GitHub/Project/Het_Experiment.RData")
treats<- cbind(type.mat.final, num.mat.final[,1], stage.mat.final[,1:2],party.mat.final[,1],
along.mat.final[,1:2], type.mat.final[,1:5]*num.mat.final[,1], type.mat.final[,1:5]*stage.mat.final[,1],
type.mat.final[,1:5]*stage.mat.final[,2], type.mat.final[,1:5]*party.mat.final[,1], type.mat.final[,1:5]*along.mat.final[,1],
type.mat.final[,1:5]*along.mat.final[,2], num.mat.final[,1]*stage.mat.final[,1], num.mat.final[,1]*stage.mat.final[,2],
num.mat.final[,1]*party.mat.final[,1], num.mat.final[,1]*along.mat.final[,1], num.mat.final[,1]*along.mat.final[,2],
stage.mat.final[,1:2]*party.mat.final[,1], stage.mat.final[,1:2]*along.mat.final[,1],
stage.mat.final[,1:2]*along.mat.final[,2], party.mat.final[,1]*along.mat.final[,1], party.mat.final[,1]*along.mat.final[,2] )
dem<- ifelse(svdat$pid3l=='Dem', 1, 0)  #line 366-369 of rep code
dem[which(is.na(dem))]<- 0
rep<- ifelse(svdat$pid3l=='Rep', 1, 0)
rep[which(is.na(rep))]<- 0
cons<- ifelse(svdat$ideo3<3, 1, 0) #line 230-231 of rep code
lib<- ifelse(svdat$ideo3==4|svdat$ideo3==5, 1, 0)
lib[which(is.na(lib))]<- 0 #line 370-371 of rep code
cons[which(is.na(cons))]<- 0
############ Defining treats
type.mat<- matrix(0, nrow = 1074, ncol=7)
colnames(type.mat)<- sort(unique(as.character(svdat$cond.type)))
for(z in 1:nrow(type.mat)){
type.mat[z,which(colnames(type.mat)==svdat$cond.type[z])]<- 1
}
type.mat.final<- type.mat[,-1]
types<- sort(unique(as.character(svdat$cond.type)))
type.num<- match(svdat$cond.type, types)
number<- c('control', '$20 million', '$50 thousand')
amount.num<- match(svdat$cond.money, number)
request<- c('control', 'requested', 'secured', 'will request')
stage.num<- match(svdat$cond.stage, request)
party<- c('control', 'a Republican', 'a Democrat')
party.num<- match(svdat$cond.party, party)
along<- c('control', 'alone', 'w/ Rep', 'w/ Dem')
along.num<- match(svdat$cond.alongWith, along)
num.mat<- matrix(0, nrow=1074, ncol=3)
colnames(num.mat)<- number
for(z in 1:nrow(num.mat)){
num.mat[z,which(colnames(num.mat)==svdat$cond.money[z])]<- 1
}
num.mat.final<- num.mat[,-1]
stage.mat<- matrix(0, nrow=1074, ncol=4)
colnames(stage.mat)<- request
for(z in 1:nrow(stage.mat)){
stage.mat[z,which(colnames(stage.mat)==svdat$cond.stage[z])]<- 1
}
stage.mat.final<- stage.mat[,-1]
party.mat<- matrix(0, nrow=1074, ncol=3)
colnames(party.mat)<- party
for(z in 1:nrow(party.mat)){
party.mat[z, which(colnames(party.mat)==svdat$cond.party[z])]<- 1
}
party.mat.final<- party.mat[,-1]
along.mat<- matrix(0, nrow=1074, ncol=4)
colnames(along.mat)<- 	along
for(z in 1:nrow(along.mat)){
along.mat[z,which(colnames(along.mat)==svdat$cond.alongWith[z])]<- 1
}
along.mat.final<- along.mat[,-1]
treats<- cbind(type.mat.final, num.mat.final[,1], stage.mat.final[,1:2],party.mat.final[,1],
along.mat.final[,1:2], type.mat.final[,1:5]*num.mat.final[,1], type.mat.final[,1:5]*stage.mat.final[,1],
type.mat.final[,1:5]*stage.mat.final[,2], type.mat.final[,1:5]*party.mat.final[,1], type.mat.final[,1:5]*along.mat.final[,1],
type.mat.final[,1:5]*along.mat.final[,2], num.mat.final[,1]*stage.mat.final[,1], num.mat.final[,1]*stage.mat.final[,2],
num.mat.final[,1]*party.mat.final[,1], num.mat.final[,1]*along.mat.final[,1], num.mat.final[,1]*along.mat.final[,2],
stage.mat.final[,1:2]*party.mat.final[,1], stage.mat.final[,1:2]*along.mat.final[,1],
stage.mat.final[,1:2]*along.mat.final[,2], party.mat.final[,1]*along.mat.final[,1], party.mat.final[,1]*along.mat.final[,2] )
treat<- treats #line 448 of rep code
### Defining the X variable
covs<- cbind(dem, rep, lib, cons) #line 373 of rep code
X <- covs #line 432 of repcode
Xfull <- model.matrix(~X*treat)
## line 391 of rep code
#Defining the Y variable
#line 432 of rep code
Y<- approve_bi<- ifelse(svdat$approval<3, 1, 0) #line 292 of rep code
library(BayesTree)
fit8<- bart(x.train=Xfull, y.train=factor(Y), x.test=Xtfull, ndpost=1000, nskip=500, usequants=T)
covstest_1 <- covs[c(1:107),]
covsfull_1 <- covs[-c(1:107),]
treattest_1 <- treat[c(1:107),]
treatfull_1 <-treat[-c(1:107),]
Xfull_1 <-model.matrix(~covsfull_1*treatfull_1)
Xtest_1 <- model.matrix(~covstest_1*treattest_1)
Yfull_1<- ifelse(svdat[-c(1:107),]$approval<3, 1, 0)
fit8<- bart(x.train=Xfull_1, y.train=factor(Yfull_1), x.test=Xtest_1, ndpost=1000, nskip=500, usequants=T)
library(glmnet)
fit1<- cv.glmnet(y = Yfull_1, x= Xfull_1, alpha=1, family='binomial', type='mse')
best.lambda = fit1$lambda.min
fit1.coefs = predict(fit1,s = best.lambda, type= "coefficients")
fit1.coefs
Yfull_10<- ifelse(svdat[-c(972:1074),]$approval<3, 1, 0)
Y_test1
Y_test1 <- Yfull_10
fit1.predict = predict(fit1, s= best.lambda, xnew = Xtest_1)
fit1.predict = predict(fit1, s= best.lambda, newx = Xtest_1)
fit1.RSS = sum((fit1.RSS-Y_test1)^2)
fit1.RSS
fit1.RSS = sum((fit1.predict-Y_test1)^2)
library(glmnet)
fit1<- cv.glmnet(y = Yfull_1, x= Xfull_1, alpha=1, family='binomial', type='mse')
best.lambda = fit1$lambda.min
fit1.coefs = predict(fit1,s = best.lambda, type= "coefficients")
fit1.coefs
Ytest_1<- ifelse(svdat[c(1:107),]$approval<3, 1, 0)
fit1.predict = predict(fit1, s= best.lambda, newx = Xtest_1)
fit1.RSS = sum((fit1.predict-Ytest_1)^2)
fit1.RSS
fit1.MSE = mean((fit1.predict-Ytest_1)^2)
fit1.MSE
install.packages("rvest")
library(rvest) # make it easy to work with HTML and XML
tdist <- read_html("http://en.wikipedia.org/wiki/Student%27s_t-distribution")# read URL (uniform resource locator): address of the webpage
tdistinfo <- html_node(tdist, ".infobox") # "." refers to a class
table <- html_table(tdistinfo, header=F)
View(table)
tdistinfo <- tdist %>%
html_node(".infobox") %>%
html_table(header = FALSE)
View(tdistinfo)
movie <- read_html("http://www.imdb.com/title/tt1490017/")
cast <- html_node(movie, "#titleCast span.itemprop") # return only the first element
html_text(cast)
html_name(cast)
html_attrs(cast)
html_attr(cast, "class")
cast <- html_nodes(movie, "#titleCast span.itemprop") # return all the elements
html_text(cast)
movie <- read_html("http://www.imdb.com/title/tt1490017/")
cast <- html_node(movie, "#titleCast .itemprop") # return only the first element
html_text(cast)
html_name(cast)
html_attrs(cast)
html_attr(cast, "class")
cast <- html_nodes(movie, "#titleCast span.itemprop") # return all the elements
html_text(cast)
births <- read_html("https://www.ssa.gov/oact/babynames/numberUSbirths.html")
html_nodes(births, "table")
html_nodes(births, "table")[[1]] # left side bar
html_nodes(births, "table")[[2]] # table we want
USbirth <- html_table(html_nodes(births, "table")[[2]])
head(USbirth)
View(USbirth)
library(XML)
install.packages(XML)
install.packages("XML")
library(XML)
library(httr)
ncaaurl <- "https://www.ncaa.com/scoreboard/basketball-men/d1/2018/02/24"
tables <- GET(ncaaurl)
allTables <- readHTMLTable(rawToChar(tables$content)) # rawToChar: converts bytes back to string
str(allTables)  # we can see how data is structured
oneGame <- allTables[[3]] # first, let's extract the first table
oneGame
oneGame$School
as.character(oneGame$School)
as.numeric(as.character(oneGame$Score))
ncaaurl <- "https://www.ncaa.com/scoreboard/basketball-men/d1/2018/02/24"
tables <- GET(ncaaurl)
allTables <- readHTMLTable(rawToChar(tables$content)) # rawToChar: converts bytes back to string
str(allTables)  # we can see how data is structured
oneGame <- allTables[[3]] # first, let's extract the first table
oneGame
oneGame$School
as.character(oneGame$School)
as.numeric(as.character(oneGame$Score))
scoreExtractor <- function(x){
output<-list()
output$Home.Team<-as.character(x$School[2])
output$Away.Team<-as.character(x$School[1])
output$Home.Score<-as.numeric(as.character(x$Score[2]))
output$Away.Score<-as.numeric(as.character(x$Score[1]))
return(output)
}
scoreExtractor(allTables[[3]])
sapply(allTables, scoreExtractor)
allScores <- t(sapply(allTables, scoreExtractor))
allScores <- as.data.frame(allScores)
rownames(allScores)<-NULL
allScores
class(allScores$Home.Team)
class(allScores$Home.Score)
allScores$Away.Team <- as.character(allScores$Away.Team)
allScores$Home.Team <- as.character(allScores$Home.Team)
allScores$Away.Score <- as.numeric(allScores$Away.Score)
allScores$Home.Score <- as.numeric(allScores$Home.Score)
class(allScores$Home.Team)
class(allScores$Home.Score)
allScores
allScores$Home.Score
plot(allScores$Home.Score, allScores$Away.Score)
abline(a=0, b=1, col="red") # Q. home advantage in basketball?
allScores
base="http://www.ncaa.com/scoreboard/basketball-men/d1/2018/02/"
days<-paste0(base, c(paste0(0, 1:9), 10:27))
days
library(plyr)
allDays <- oneDayScores(days[1])
head(allDays)
oneDayScores <- function(myURL){
tables <- GET(myURL)
allTables <- readHTMLTable(rawToChar(tables$content))
allScores <- t(sapply(allTables, scoreExtractor))
allScores <- as.data.frame(allScores)
rownames(allScores)<-NULL
allScores$Home.Team <- as.character(allScores$Home.Team)
allScores$Away.Team <- as.character(allScores$Away.Team)
allScores$Away.Score <- as.character(allScores$Away.Score)
allScores$Home.Score <- as.character(allScores$Home.Score)
allScores$Home.Team <-  gsub('[0-9]+', '', allScores$Home.Team)
allScores$Home.Team <- gsub('-', '', allScores$Home.Team)
allScores$Away.Team <-  gsub('[0-9]+', '', allScores$Away.Team)
allScores$Away.Team <- gsub('-', '', allScores$Away.Team)
return(allScores)
}
base="http://www.ncaa.com/scoreboard/basketball-men/d1/2018/02/"
days<-paste0(base, c(paste0(0, 1:9), 10:27))
days
library(plyr)
allDays <- oneDayScores(days[1])
head(allDays)
for(i in days[2:length(days)]){
print(i)
allDays<-rbind(allDays, oneDayScores(i))
}
allDays
plot(allDays$Home.Score, allDays$Away.Score)
abline(a=0, b=1, col="red")
t.test(allDays$Home.Score, allDays$Away.Score)
