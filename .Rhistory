<<<<<<< HEAD
n=5
matrix1 <- replicate(m, rnorm(n)) # create matrix
matdf <- matdf1 <- matdf2 <- data.frame(matrix1) # transform into data frame
matdf
for (i in 1:m) {
for (j in 1:n) {
matdf1[i,j] <- matdf1[i,j] + 1.87*cos(.25)*pi # addition
}
}
matdf1
matdf2 <- matdf2 + 1.87*cos(.25)*pi
matdf2
microbenchmark(
"loop" = for (i in 1:m) {
for (j in 1:n) {
matdf[i,j] <- matdf[i,j] + 1.87*cos(.25)*pi
}
},
"vectorized" = matdf <- matdf + 1.87*cos(.25)*pi
)
## rowSums / colSums
mat1 <- matrix(abs(rnorm(2500))+pi, ncol=50)
head(mat1)[,1:5]
apply(mat1, 1, function(x) sum(x))
rowSums(mat1)
microbenchmark(apply(mat1, 1, function(x) sum(x)),
rowSums(mat1))
## rowMeans/colMeans
apply(mat1, 2, function(x) mean(x))
colMeans(mat1)
microbenchmark(apply(mat1, 2, function(x) mean(x)),
colMeans(mat1))
## Even when working with matrices, think about the actual
## calculations you perform
mat2 <- matrix(sample(1:7, 90000, replace=T), ncol=300)
mat3 <- matrix(sample(2:6, 90000, replace=T), ncol=300)
ys <- sample(3:5, 300, replace=T)
all.equal(mat2 %*% mat3 %*% ys , mat2 %*% (mat3 %*% ys))
microbenchmark(mat2 %*% mat3 %*% ys,
mat2 %*% (mat3 %*% ys))
## Crossproducts
mat4 <- matrix(1:4, ncol=2)
mat5 <- matrix(5:8, ncol=2)
microbenchmark(t(mat4)%*%mat5,
crossprod(mat4, mat5))
## Paste/collapse and copies
random_states <- function() {
paste(sample(state.name,10,replace =TRUE),collapse ="")
}
states10 <- replicate(10, random_states())
states10
states100 <- replicate(100, random_states())
collapse <- function(states) {
out <- ""
for (x in states) {
out <- paste0(out, x) # same as paste(..., sep="", collapse)
}
out
}
microbenchmark(
"loop10" = collapse(states10),
"vec10" = paste(states10, collapse =""),
"loop100" = collapse(states100),
"vec100" = paste(states100, collapse ="")
)
## Here, we are not only getting around using the loop, but also
## avoiding copies. Whenever you append(), cbind(), rbind(), or
## paste() to create a bigger object, R must first allocate space
## for the new object and then copy the old object to its new home.
## If you're repeating this many times, like in a for loop, this
## can be quite computationally expensive.
## Parallelization
## Parallelization uses multiple cores to work simultaneously on different
## parts of a problem. It doesn't reduce the computing time, but it saves
## your time because you're using more of your computer's resources.
install.packages("parallel")
library(parallel)
cores <- detectCores()
cores
pause <- function(i) {
function(x) Sys.sleep(i)
}
## On a Mac:
microbenchmark(
lapply(1:4, pause(0.25)),
mclapply(1:4, pause(0.25), mc.cores = cores),
times=10
)
## On a Windows machine:
cluster <- makePSOCKcluster(cores)
microbenchmark(
parLapply(cluster, 1:4, pause(0.25)),
lapply(1:4, pause(0.25)),
times=10
)
## More generally with apply/plyr family
library(plyr)
bigmat <- matrix(rnorm(90000), ncol=300)
dim(bigmat)
## Mac:
install.packages("doMC")
library(doMC)
registerDoMC(3) # register number of cores
microbenchmark(
"solo" = aaply(bigmat, 2, sum),
"parallel" = aaply(bigmat, 2, sum, .parallel=T),
times=20
)
## But of course we now know that this should really be colSums
microbenchmark(
"solo" = aaply(bigmat, 2, sum),
"parallel" = aaply(bigmat, 2, sum, .parallel=T),
"vectorized" = colSums(bigmat),
times=20
)
## Windows:
install.packages("foreach")
library(foreach)
install.packages("doSNOW")
library(doSNOW)
registerDoSNOW(makeCluster(2, type = "SOCK")) # set to two cores
getDoParWorkers() # check number of cores
microbenchmark(
"solo" = aaply(bigmat, 2, sum),
"parallel" = aaply(bigmat, 2, sum, .parallel=T),
times=20
)
## But of course we now know that this should really be colSums
microbenchmark(
"solo" = aaply(bigmat, 2, sum),
"parallel" = aaply(bigmat, 2, sum, .parallel=T),
"vectorized" = colSums(bigmat),
times=20
)
install.packages("microbenchmark")
install.packages("doSNOW")
install.packages("foreach")
install.packages("doSNOW")
install.packages("foreach")
microbenchmark(
"solo" = aaply(bigmat, 2, sum),
"parallel" = aaply(bigmat, 2, sum, .parallel=T),
"vectorized" = colSums(bigmat),
times=20
)
warnings()
microbenchmark(
"solo" = aaply(bigmat, 2, sum),
"parallel" = aaply(bigmat, 2, sum, .parallel=T),
"vectorized" = colSums(bigmat),
times=20
)
microbenchmark(
"solo" = aaply(bigmat, 2, sum),
"vectorized" = colSums(bigmat),
times=20
)
microbenchmark(
"solo" = aaply(bigmat, 2, sum),
"parallel" = aaply(bigmat, 2, sum),
"vectorized" = colSums(bigmat),
times=20
)
install.packages("foreach")
library(foreach)
install.packages("foreach")
microbenchmark(
"solo" = aaply(bigmat, 2, sum),
"parallel" = aaply(bigmat, 2, sum),
"vectorized" = colSums(bigmat),
times=20
)
microbenchmark(
"solo" = aaply(bigmat, 2, sum),
"parallel" = aaply(bigmat, 2, sum, .parallel=T),
"vectorized" = colSums(bigmat),
times=20
)
library(foreach)
library(doSNOW)
registerDoSNOW(makeCluster(2, type = "SOCK")) # set to two cores
getDoParWorkers() # check number of cores
microbenchmark(
"solo" = aaply(bigmat, 2, sum),
"parallel" = aaply(bigmat, 2, sum, .parallel=T),
times=20
)
microbenchmark(
"solo" = aaply(bigmat, 2, sum),
"parallel" = aaply(bigmat, 2, sum, .parallel=T),
"vectorized" = colSums(bigmat),
times=20
)
warnings()
library(microbenchmark)
microbenchmark(sqrt(x),
x^0.5,
times=1000)
head(mtcars)
microbenchmark(
"[32, 11]" = mtcars[32,11],
"$carb[32]"	= mtcars$carb[32],
"[[c(11, 32)]]" = mtcars[[c(11,32)]],
"[[11]][32]" = mtcars[[11]][32],
".subset2" = .subset2(mtcars,11)[32])
library(profvis)
m=5
n=5
matrix1 <- replicate(m, rnorm(n)) # create matrix
matdf <- matdf1 <- matdf2 <- data.frame(matrix1) # transform into data frame
matdf
for (i in 1:m) {
for (j in 1:n) {
matdf1[i,j] <- matdf1[i,j] + 1.87*cos(.25)*pi # addition
}
}
matdf1
matdf2 <- matdf2 + 1.87*cos(.25)*pi
matdf2
microbenchmark(
"loop" = for (i in 1:m) {
for (j in 1:n) {
matdf[i,j] <- matdf[i,j] + 1.87*cos(.25)*pi
}
},
"vectorized" = matdf <- matdf + 1.87*cos(.25)*pi
)
mat1 <- matrix(abs(rnorm(2500))+pi, ncol=50)
head(mat1)[,1:5]
apply(mat1, 1, function(x) sum(x))
rowSums(mat1)
microbenchmark(apply(mat1, 1, function(x) sum(x)),
rowSums(mat1))
apply(mat1, 2, function(x) mean(x))
colMeans(mat1)
microbenchmark(apply(mat1, 2, function(x) mean(x)),
colMeans(mat1))
mat2 <- matrix(sample(1:7, 90000, replace=T), ncol=300)
mat3 <- matrix(sample(2:6, 90000, replace=T), ncol=300)
ys <- sample(3:5, 300, replace=T)
all.equal(mat2 %*% mat3 %*% ys , mat2 %*% (mat3 %*% ys))
microbenchmark(mat2 %*% mat3 %*% ys,
mat2 %*% (mat3 %*% ys))
mat4 <- matrix(1:4, ncol=2)
mat5 <- matrix(5:8, ncol=2)
microbenchmark(t(mat4)%*%mat5,
crossprod(mat4, mat5))
random_states <- function() {
paste(sample(state.name,10,replace =TRUE),collapse ="")
}
states10 <- replicate(10, random_states())
states10
states100 <- replicate(100, random_states())
collapse <- function(states) {
out <- ""
for (x in states) {
out <- paste0(out, x) # same as paste(..., sep="", collapse)
}
out
}
microbenchmark(
"loop10" = collapse(states10),
"vec10" = paste(states10, collapse =""),
"loop100" = collapse(states100),
"vec100" = paste(states100, collapse ="")
)
library(parallel)
cores <- detectCores()
cores
pause <- function(i) {
function(x) Sys.sleep(i)
}
cluster <- makePSOCKcluster(cores)
microbenchmark(
parLapply(cluster, 1:4, pause(0.25)),
lapply(1:4, pause(0.25)),
times=10
)
library(plyr)
bigmat <- matrix(rnorm(90000), ncol=300)
dim(bigmat)
microbenchmark(
"solo" = aaply(bigmat, 2, sum),
"parallel" = aaply(bigmat, 2, sum, .parallel=T),
"vectorized" = colSums(bigmat),
times=20
)
library(foreach)
library(foreach)
library(doSNOW)
registerDoSNOW(makeCluster(2, type = "SOCK")) # set to two cores
getDoParWorkers() # check number of cores
microbenchmark(
"solo" = aaply(bigmat, 2, sum),
"parallel" = aaply(bigmat, 2, sum, .parallel=T),
times=20
)
setwd("~/GitHub/Project")
load("~/GitHub/Project/Het_Experiment.RData")
#What to do, define every variable in this file
######################################################
###### From SLF_round 2 -- Comments by Jon ###########
######################################################
## See table 2 on pg 422 of Reference Paper for full list of methods
################## Setup ###############
## Packages you will need to install (uncomment and run this section once):
## You can uncomment all lines at once by highlighting the lines, then ctrl+shift+c
# install.packages(glmnet)
# install.packages(FindIt)
# install.packages(arm)
# install.packages(GAMBoost)
# install.packages(mboost)
# install.packages("KRLS")
# install.packages("rJava")
# install.packages("RWeka")
############# different def of covs on line 863 of rep code. Investigate this
# Set WD as needed:
setwd("C:/Users/jgros/documents/GitHub/Project/")
load("Het_Experiment.Rdata")
dem<- ifelse(svdat$pid3l=='Dem', 1, 0)  #line 366-369 of rep code
=======
create.plot4<- function(var1, pos.values_var1, labels_1, var2, pos.values, vert.label, xlim=c(-0.4, 0.4), left = 6, right= 6, mult, multiplier){
num.facts<- len(pos.values)
num.right<- len(pos.values_var1)
fill<- matrix(0, nrow=num.right, ncol=num.facts)
tt<- 1:nrow(treat.mat)
av.effect<- function(subset){
out<- mean(final.eff[subset])
print(out)
}
num_category<- matrix(NA, nrow = num.right, ncol = num.facts)
for(z in 1:num.right){
for(k in 1:num.facts){
fill[z, k]<- av.effect(which(var1==pos.values_var1[z] & var2==pos.values[k]))
num_category[z,k]<- multiplier[pos.values[k]]
# if(z ==2){
# fill[z, k]<- av.effect(which(treat.mat$treatCond2==1 & var2==pos.values[[k]]))
# }
# if(z ==3){
# fill[z, k]<- av.effect(which(treat.mat$treatCond3==1 & var2==pos.values[[k]]))
# }
# if(z ==4){
# fill[z, k]<- av.effect(which(treat.mat$treatCond4==1 & var2==pos.values[[k]]))
# }
# if(z ==5){
# fill[z, k]<- av.effect(which(treat.mat$treatCond5==1 & var2==pos.values[[k]]))
# }
# if(z ==6){
# fill[z, k]<- av.effect(which(treat.mat$treatCond6==1 & var2==pos.values[[k]]))
# }
}
}
#fill2<- fill[c(3, 1, 6, 5, 4, 2),]
#	rank.fills<- apply(fill2, 2, rank.func)
fill2<- fill
par(mar=c(4, left, 3, right))
par(las=1)
par(cex.lab = 1.25)
plot(c(0,1)~c(0,1), pch='', xlab='Treatment Effect', ylab='', axes = F, ylim=c(1, num.right*num.facts), xlim= xlim, frame.plot=F)
a<- 0
seqs<- seq(xlim[1], xlim[2], by=0.025)
for(aa in 1:len(seqs)){
arrows(seqs[aa], -10, seqs[aa], 1e7, len=0, lty=2, col=gray(0.6))
}
seq2<- seq(1, num.right*num.facts)
for(aa in 1:len(seq2)){
arrows(-10, aa, 10, aa, len=0, col=gray(0.8))
}
arrows(0, -10, 0, 1e7, len=0, lwd=2)
axis(1, seq(round(xlim[1], 2), round(xlim[2],2), by=0.05))
axis(3, seq(round(xlim[1], 2), round(xlim[2],2), by=0.05))
base.lab<-  labels_1
labs<- c()
labs2<- c()
a<- 0
x_store<- c()
for(z in 1:num.right){
ars<- ps<- c()
for(k in 1:num.facts){
a<- a + 1
ars<- c(ars, a)
points(fill2[z,k], a, pch=20, cex = num_category[z,k]*mult)
x_store[a]<- fill2[z,k]
ps<- c(ps, fill2[z,k])
labs<- c(labs, vert.label[k])
labs2<- c(labs2, paste(vert.label[k], base.lab[z], sep='_'))
}
points(ps, ars, type='l', lwd=1.25)
}
axis(2, 1:(num.right*num.facts), labs)
count<- 1
for(z in 1:num.right){
seqs<- count:(count + num.facts - 1)
axis(4, c(count , median(seqs),  count + num.facts-1), c('', base.lab[z], ''))
count<- count + num.facts
}
names(x_store)<- labs2
return(x_store)
}
treat.mat<- as.data.frame(treat.mat)
treat.var<- rep(0, nrow(treat.mat))
treat.var[which(treat.mat$treatPlanParent==1)]<- 1
treat.var[which(treat.mat$treatParks==1)]<- 2
treat.var[which(treat.mat$treatGun_Range==1)]<- 3
treat.var[which(treat.mat$treatFire==1)]<- 4
treat.var[which(treat.mat$treatPolice==1)]<- 5
treat.var[which(treat.mat$treatRoads==1)]<- 6
var5<- rep(0, nrow(treat.mat))
var5[which(treat.mat$Lib==1 & treat.mat$Dem==1)]<- 1
var5[which(treat.mat$Lib==0 & treat.mat$Cons==0 & treat.mat$Dem==1)]<- 2
var5[which(treat.mat$Lib==0 & treat.mat$Cons==1 & treat.mat$Dem==1)]<- 3
var5[which(treat.mat$Lib==1 & treat.mat$Dem==0 & treat.mat$Rep==0)]<- 4
var5[which(treat.mat$Lib==0 & treat.mat$Cons==0 & treat.mat$Dem==0 & treat.mat$Rep==0)]<- 5
var5[which(treat.mat$Lib==0 & treat.mat$Cons==1 & treat.mat$Dem==0 & treat.mat$Rep==0)]<- 6
var5[which(treat.mat$Lib==1 & treat.mat$Rep==1)]<- 7
var5[which(treat.mat$Lib==0 & treat.mat$Cons==0 & treat.mat$Rep==1)]<- 8
var5[which(treat.mat$Lib==0 & treat.mat$Cons==1 & treat.mat$Rep==1)]<- 9
var6<- ifelse(treat.mat$treatmil_20==1 , 1, 2)
treat.var2<- rep(0, len(var5))
treat.var2[which(treat.mat$treatPlanParent==1 & treat.mat$treatmil_20==0)]<- 1
treat.var2[which(treat.mat$treatPlanParent==1 & treat.mat$treatmil_20==1)]<- 2
treat.var2[which(treat.mat$treatParks==1 & treat.mat$treatmil_20==0)]<- 3
treat.var2[which(treat.mat$treatParks==1 & treat.mat$treatmil_20==1)]<- 4
treat.var2[which(treat.mat$treatGun_Range==1 & treat.mat$treatmil_20==0)]<- 5
treat.var2[which(treat.mat$treatGun_Range==1 & treat.mat$treatmil_20==1)]<- 6
treat.var2[which(treat.mat$treatFire==1 & treat.mat$treatmil_20==0)]<- 7
treat.var2[which(treat.mat$treatFire==1 & treat.mat$treatmil_20==1)]<- 8
treat.var2[which(treat.mat$treatPolice==1 & treat.mat$treatmil_20==0)]<- 9
treat.var2[which(treat.mat$treatPolice==1 & treat.mat$treatmil_20==1)]<- 10
treat.var2[which(treat.mat$treatRoads==1 & treat.mat$treatmil_20==0)]<- 11
treat.var2[which(treat.mat$treatRoads==1 & treat.mat$treatmil_20==1)]<- 12
treat.var3<- rep(0, len(treat.var2))
treat.var3[which(treat.mat$treatPlanParent==1 & treat.mat$treatrequest==0 & treat.mat$treatsecure==0)]<- 1
treat.var3[which(treat.mat$treatPlanParent==1 & treat.mat$treatrequest==1 & treat.mat$treatsecure==0)]<- 2
treat.var3[which(treat.mat$treatPlanParent==1 & treat.mat$treatrequest==0 & treat.mat$treatsecure==1)]<- 3
treat.var3[which(treat.mat$treatParks==1 & treat.mat$treatrequest==0 & treat.mat$treatsecure==0)]<- 4
treat.var3[which(treat.mat$treatParks==1 & treat.mat$treatrequest==1 & treat.mat$treatsecure==0)]<- 5
treat.var3[which(treat.mat$treatParks==1 & treat.mat$treatrequest==0 & treat.mat$treatsecure==1)]<- 6
treat.var3[which(treat.mat$treatGun_Range==1 & treat.mat$treatrequest==0 & treat.mat$treatsecure==0)]<- 7
treat.var3[which(treat.mat$treatGun_Range==1 & treat.mat$treatrequest==1 & treat.mat$treatsecure==0)]<- 8
treat.var3[which(treat.mat$treatGun_Range==1 & treat.mat$treatrequest==0 & treat.mat$treatsecure==1)]<- 9
treat.var3[which(treat.mat$treatFire==1 & treat.mat$treatrequest==0 & treat.mat$treatsecure==0)]<- 10
treat.var3[which(treat.mat$treatFire==1 & treat.mat$treatrequest==1 & treat.mat$treatsecure==0)]<- 11
treat.var3[which(treat.mat$treatFire==1 & treat.mat$treatrequest==0 & treat.mat$treatsecure==1)]<- 12
treat.var3[which(treat.mat$treatPolice==1 & treat.mat$treatrequest==0 & treat.mat$treatsecure==0)]<- 13
treat.var3[which(treat.mat$treatPolice==1 & treat.mat$treatrequest==1 & treat.mat$treatsecure==0)]<- 14
treat.var3[which(treat.mat$treatPolice==1 & treat.mat$treatrequest==0 & treat.mat$treatsecure==1)]<- 15
treat.var3[which(treat.mat$treatRoads==1 & treat.mat$treatrequest==0 & treat.mat$treatsecure==0)]<- 16
treat.var3[which(treat.mat$treatRoads==1 & treat.mat$treatrequest==1 & treat.mat$treatsecure==0)]<- 17
treat.var3[which(treat.mat$treatRoads==1 & treat.mat$treatrequest==0 & treat.mat$treatsecure==1)]<- 18
new_labels<- c()
a<- 0
for(z in c('Planned\nParenthood', 'Parks', 'Gun\nRange', 'Fire\nDepartment', 'Police', 'Roads')){
for(k in c('$50 Thousand', '$20 Million')){
a<- a + 1
new_labels[a]<- paste(z, k, sep='\n')
}
}
ideo_vec<- ifelse(cons==1, 'Conservative', ifelse(lib==1, 'Liberal', 'Moderate'))
store_tabs<- table(ideo_vec, svdat$pid3l)/nrow(svdat)
cbind(1:9, c('Liberal Democrat', 'Moderate Democrat', 'Conservative Democrat', 'Liberal Independent', 'Moderate Independent', 'Conservative Independent', 'Liberal Republican', 'Moderate Republican', 'Conservative Republican'))
store_vec<- rep(NA, 9)
store_vec[1]<- store_tabs[2,2]
store_vec[2]<- store_tabs[3,2]
store_vec[3]<- store_tabs[1,2]
store_vec[4]<- store_tabs[2,1]
store_vec[5]<- store_tabs[3,1]
store_vec[6]<- store_tabs[1,1]
store_vec[7]<- store_tabs[2,3]
store_vec[8]<- store_tabs[3,3]
store_vec[9]<- store_tabs[1,3]
var7<- ifelse(treat.mat$treatsecure==0 & treat.mat$treatrequest==0 , 1, ifelse(treat.mat$treatrequest==1, 2, 3))
new_labels3<- c()
a<- 0
for(z in c('Planned\nParenthood', 'Parks', 'Gun\nRange', 'Fire\nDepartment', 'Police', 'Roads')){
for(k in c("Will\nRequest", "Request", "Secured")){
a<- a + 1
new_labels3[a]<- paste(z, k, sep='\n')
}
}
store<- create.plot4(treat.var, 1:6, c('Planned\nParenthood', 'Parks', 'Gun\nRange', 'Fire\nDepartment', 'Police', 'Roads'), var5, 1:9, c('Liberal Democrat', 'Moderate Democrat', 'Conservative Democrat', 'Liberal Independent', 'Moderate Independent', 'Conservative Independent', 'Liberal Republican', 'Moderate Republican', 'Conservative Republican'), left=11, right=6, mult = 10, multiplier = store_vec)
dev.copy(device=pdf, file='MainFigure1.pdf', height = 10, width = 11)
dev.off()
mults<- table(ideo_vec)/nrow(svdat)
mults2<- mults[c(2, 3, 1)]
ideo_vec2<- ifelse(treat.mat$Lib==1, 1, ifelse(treat.mat$Cons==1, 2, 3))
create.plot4(treat.var2, 1:12, new_labels,	 ideo_vec2, 1:3, c('Liberal', 'Moderate', 'Conservative'), mult = 4,multiplier = mults2 )
dev.copy(device=pdf, file='SmallTypeMoneyIdeology.pdf', height = 12, width = 7)
dev.off()
create.plot4(treat.var3, 1:18, new_labels3, ideo_vec2, 1:3, c('Liberal', 'Moderate', 'Conservative'), mult = 4,multiplier = mults2)
dev.copy(device=pdf, file='SmallTypeSecuredIdeology_1.pdf', height = 12, width = 7)
dev.off()
data<-  read.delim("Public_v_Private_and_Taunting_2.csv", sep=',')
len <- length
subset<- data[which(data$creditCondition==1|data$creditCondition==2|data$creditCondition==3),]
dem<- ifelse(subset$Q67==1, 1,0)
rep<- ifelse(subset$Q67==2, 1, 0)
ind<- ifelse(subset$Q67==3, 1, 0)
strong_rep<- strong_dem<- rep(0, len(dem))
strong_rep[which(rep==1)]<- ifelse(subset$Q72[which(rep==1)]==1, 1, 0)
strong_dem[which(dem==1)]<- ifelse(subset$Q73[which(dem==1)]==1, 1, 0)
female<- ifelse(subset$Q74==2, 1, 0)
white<- ifelse(subset$Q75==1, 1, 0)
age<- subset$Q76 + 17
strong_lib<- ifelse(subset$Q78==5, 1, 0)
lib<- ifelse(subset$Q78==4 , 1, 0)
cons<- ifelse(subset$Q78==2, 1, 0)
mod<- ifelse(subset$Q78==3, 1, 0)
strong_cons<- ifelse(subset$Q78==1, 1, 0)
lib_dem_s<- ifelse(strong_lib==1 & strong_dem==1, 1, 0)
cons_rep_s<- ifelse(strong_cons==1 & strong_rep==1, 1, 0)
low_edu<- ifelse(subset$Q81<3, 1, 0)
med_edu<- ifelse(subset$Q81>2 & subset$Q81<6, 1, 0)
high_edu<- ifelse(subset$Q81>4, 1, 0)
low_inc<- ifelse(subset$Q82<4, 1, 0)
med_inc<- ifelse(subset$Q82>3 & subset$Q82<7, 1, 0)
high_inc<- ifelse(subset$Q82>6, 1, 0)
age_1<- ifelse(age<37, 1, 0)
age_2<- ifelse(age>36 & age<50, 1, 0)
age_3<- ifelse(age>49 & age<64, 1, 0)
age_4<- ifelse(age>63, 1, 0)
leg.est<- read.delim('JackmanEstimates.csv', sep=',')
c112_lnames<- tolower(as.character(leg.est[,1]))
rep_ideals<- rep(NA, nrow(subset))
missing<- c()
double<- c()
for(z in 1:nrow(subset)){
match<- which(c112_lnames==tolower(subset$lastName)[z] & as.character(leg.est[,3])==as.character(subset$state)[z])
if(len(match)==1){
rep_ideals[z]<- leg.est[match,10]
}
if(len(match)==0){
missing<- c(missing, z)
}
if(len(match)>1){
test<- leg.est[match,]
fnames<- tolower(as.character(test[,2]))
ee<- which(fnames==subset$firstName[z])
if(len(ee)>0){
rep_ideals[z]<- leg.est[match[ee],10]
}
}
}
rep_dem<- ifelse(subset$party=='D', 1, 0)
approve_bi<- ifelse(subset$Q17<3, 1, 0)
treat<- factor(subset$creditCondition)
match<- ifelse((dem==1 & rep_dem==1) | (rep==1 & rep_dem==0), 1, 0)
rep_match<- ifelse(rep==1 & rep_dem==0, 1, 0)
dem_match<- ifelse(dem==1 & rep_dem==1, 1, 0)
covs<- cbind(low_edu, med_edu, low_inc, med_inc, age_1, age_2, age_3, female, white, strong_lib, lib, cons, strong_cons, strong_dem, dem, ind, rep, strong_rep, rep_dem, dem_match, rep_match, rep_ideals, abs(rep_ideals), strong_lib*dem_match, strong_cons*rep_match, dem_match*rep_ideals, rep_match*rep_ideals)
colnames(covs)[23:27]<- c('|repIdeals|',  'strongLib_x_demMatch', 'strongCons_x_repMatch', 'demMatch_x_repIdeals', 'repMatch_x_repIdeals')
treat.mat<- matrix(0, nrow=nrow(covs), ncol=2)
for(z in 1:nrow(treat.mat)){
treat.mat[z,1]<- ifelse(treat[z]==2, 1, 0)
treat.mat[z,2]<- ifelse(treat[z]==3, 1, 0)
}
colnames(treat.mat)<- c('CBO', 'Partisan')
rms<- na.omit(cbind(covs, treat.mat, approve_bi))
covs<- rms[,1:27]
treats<- rms[,28:29]
app<- rms[,30]
X<- covs
treat<- treats
model.mat<- model.matrix(~X*treat)
edu_mat<- matrix(0, nrow=3, ncol=2)
diag(edu_mat)<- 1
party_id_mat<- matrix(0, nrow=4, ncol=3)
party_id_mat[1,1]<- party_id_mat[2,2]<- party_id_mat[3,3]<- 1
strong_mat<- c(1,0)
inc_mat<- matrix(0, nrow=3, ncol=2)
diag(inc_mat)<- 1
ideo_mat<- matrix(0, nrow=5, ncol=4)
diag(ideo_mat)<- 1
fem_mat<- c(1,0)
age_mat<- matrix(0, nrow=4, ncol=3)
diag(age_mat)<- 1
white_mat<- c(1,0)
treat.counter<- matrix(0, nrow=2, ncol=2)
diag(treat.counter)<- 1
party_id_mat<- matrix(0, nrow=4, ncol=3)
diag(party_id_mat)<- 1
rep_dem_mat<- c(1,0)
ideals<- c(-1.9, -1, 0.02, 0.11, 0.9, 1.5)
treat.mat<- cont.mat<- matrix(NA, nrow=51840, ncol=83)
a<- 0
for(aa in 1:nrow(edu_mat)){
for(bb in 1:nrow(inc_mat)){
for(cc in 1:nrow(age_mat)){
for(dd in 1:len(fem_mat)){
for(ee in 1:len(white_mat)){
for(ff in  1:nrow(ideo_mat)){
for(gg in 1:nrow(party_id_mat)){
if(party_id_mat[gg,1]==1|party_id_mat[gg,3]==1){
strong_mat<- c(1,0)}
else{
strong_mat<- 0}
for(hh in 1:len(strong_mat)){
for(ii in 1:len(rep_dem_mat)){
for(jj in 1:3){
for(kk in 1:2){
a<- a + 1
ins_ideal<- ifelse(rep_dem_mat[ii]==1, ideals[1:3][jj], ideals[4:6][jj])
abs_ind_ideal<- abs(ins_ideal)
r_m_ins<- ifelse(party_id_mat[gg,3]==1 & rep_dem_mat[ii]==0, 1, 0)
d_m_ins<- ifelse(party_id_mat[gg,1]==1 & rep_dem_mat[ii]==1, 1, 0)
sd_ins<- ifelse(party_id_mat[gg,1]==1, strong_mat[hh], 0)
sr_ins<- ifelse(party_id_mat[gg,3]==1, strong_mat[hh], 0)
part_ab<- c(edu_mat[aa,], inc_mat[bb,], age_mat[cc,], fem_mat[dd], white_mat[ee], ideo_mat[ff,], sd_ins, party_id_mat[gg,], sr_ins, rep_dem_mat[ii], d_m_ins, r_m_ins, ins_ideal, abs_ind_ideal, ideo_mat[ff,1]*d_m_ins, ideo_mat[ff,4]*r_m_ins, d_m_ins*ins_ideal, r_m_ins*ins_ideal)
treat.mat[a,1:27]<- part_ab
treat.mat[a, 28:29]<- treat.counter[kk,]
cols<- 30
for(ll in 1:2){
for(mm in 1:27){
treat.mat[a,cols]<- treat.counter[kk,ll]*treat.mat[a,mm]
cols<- cols + 1
}}
}}}}}}}}}}
print(aa)}
cont.mat<- treat.mat
cont.mat[,28:83]<- 0
cont.mat<- cbind(1, cont.mat)
treat.mat<- cbind(1, treat.mat)
colnames(treat.mat)<- colnames(cont.mat)<- colnames(model.mat)
colnames(treat.mat)<- gsub('X', '', colnames(treat.mat))
colnames(cont.mat)<-  gsub('X', '', colnames(cont.mat))
load('BlamePreds.RData')
diff<- preds$Treated - preds$Control
final.eff<- diff%*%preds$Weights
final.eff[order(final.eff, decreasing=T)[1:20]]
treat.mat[order(final.eff, decreasing=T)[1:20],]
seq1<- c(1:5)
seq2<- c(1:5)
mod2<- ifelse(apply(treat.mat[,11:14], 1, sum)==0, 1, 0)
ideos<- cbind(treat.mat[,11:12], mod2, treat.mat[,13:14])
name1<- c('StrongLib', 'Lib', 'Mod', 'Cons', 'StrongCons')
name2<- c('StrongDem', 'Dem', 'Ind', 'Rep', 'StrongRep')
name3<- c('Democratic\nRepresentative', 'Republican\nRepresentative')
strong_dem<- ifelse(treat.mat[,15]==1 & treat.mat[,16]==1, 1, 0)
dem<- ifelse(treat.mat[,15]==0 & treat.mat[,16]==1, 1, 0)
ind<- ifelse(treat.mat[,17]==1, 1, 0)
rep<- ifelse(treat.mat[,18]==1 & treat.mat[,19]==0, 1, 0)
strong_rep<- ifelse(treat.mat[,18]==1 & treat.mat[,19]==1, 1, 0)
pids<- cbind(strong_dem, dem, ind, rep, strong_rep)
new_label<- c()
treat.mat<- as.data.frame(treat.mat)
left_var<- right_var<- rep(0, nrow(treat.mat))
a<- 0
for(z in seq1){
for(y in seq2){
a <- a + 1
left_var[which(ideos[, z]==1 & pids[,y]==1)]<- a
new_label[a]<- paste(name1[z], name2[y], sep='/')
}
}
right_var[which(treat.mat$rep_dem==1)]<- 1
right_var[which(treat.mat$rep_dem==0)]<- 2
dem<- ifelse(subset$Q67==1, 1,0)
rep<- ifelse(subset$Q67==2, 1, 0)
ind<- ifelse(subset$Q67==3, 1, 0)
strong_rep<- strong_dem<- rep(0, len(dem))
strong_rep[which(rep==1)]<- ifelse(subset$Q72[which(rep==1)]==1, 1, 0)
strong_dem[which(dem==1)]<- ifelse(subset$Q73[which(dem==1)]==1, 1, 0)
female<- ifelse(subset$Q74==2, 1, 0)
white<- ifelse(subset$Q75==1, 1, 0)
age<- subset$Q76 + 17
strong_lib<- ifelse(subset$Q78==5, 1, 0)
lib<- ifelse(subset$Q78==4 , 1, 0)
cons<- ifelse(subset$Q78==2, 1, 0)
mod<- ifelse(subset$Q78==3, 1, 0)
strong_cons<- ifelse(subset$Q78==1, 1, 0)
pid1<- cbind(strong_dem, dem, ind, rep, strong_rep)
ideo1<- cbind(strong_lib, lib,  mod, cons, strong_cons)
fill_dem<- fill_rep<- matrix(NA, nrow = 5, ncol = 5)
a<- 0
point_size<- rep(0, 25)
point_size<- point_size/sum(point_size)
for(y in 1:5){
for(z in 1:5){
a<- a + 1
point_size[a]<- length(which(pid1[,z]==1 & ideo1[,y]==1))
}
}
par(mfrow=c(1,1))
create.plot4(right_var, 1, name3, left_var, 1:26, new_label,xlim =c(-0.25, 0.25), left =10, right = 8, multiplier= rep(point_size, 2), mult = 50)
dev.copy(device=pdf, file='~/Dropbox/creditClaimingProjects/het/NewBlame1.pdf', height = 8, width = 6)
dev.off()
create.plot4(right_var, 2, name3[2], left_var, 1:26, new_label,xlim =c(-0.25, 0.25), left =10, right = 8, multiplier= rep(point_size, 2), mult = 50)
dev.copy(device=pdf, file='~/Dropbox/creditClaimingProjects/het/NewBlame2.pdf', height = 8, width = 6)
dev.off()
Xfull <- model.matrix(~X*treat)
X <- covs #line 432 of repcode
covs<- cbind(dem, rep, lib, cons) #line 373 of rep code
Xfull <- model.matrix(~X*treat)
X <- covs #line 432 of repcode
covs<- cbind(dem, rep, lib, cons) #line 373 of rep code
dem<- ifelse(svdat$pid3l=='Dem', 1, 0) Line #line 366-369 of rep code
>>>>>>> bf7998bd49f5b12b9a6b3cbe6c67a57a4f70aeca
dem[which(is.na(dem))]<- 0
rep<- ifelse(svdat$pid3l=='Rep', 1, 0)
rep[which(is.na(rep))]<- 0
cons<- ifelse(svdat$ideo3<3, 1, 0) #line 230-231 of rep code
lib<- ifelse(svdat$ideo3==4|svdat$ideo3==5, 1, 0)
lib[which(is.na(lib))]<- 0 #line 370-371 of rep code
cons[which(is.na(cons))]<- 0
<<<<<<< HEAD
############ Defining treats
type.mat<- matrix(0, nrow = 1074, ncol=7)
colnames(type.mat)<- sort(unique(as.character(svdat$cond.type)))
for(z in 1:nrow(type.mat)){
type.mat[z,which(colnames(type.mat)==svdat$cond.type[z])]<- 1
}
type.mat.final<- type.mat[,-1]
types<- sort(unique(as.character(svdat$cond.type)))
type.num<- match(svdat$cond.type, types)
number<- c('control', '$20 million', '$50 thousand')
amount.num<- match(svdat$cond.money, number)
request<- c('control', 'requested', 'secured', 'will request')
stage.num<- match(svdat$cond.stage, request)
party<- c('control', 'a Republican', 'a Democrat')
party.num<- match(svdat$cond.party, party)
along<- c('control', 'alone', 'w/ Rep', 'w/ Dem')
along.num<- match(svdat$cond.alongWith, along)
num.mat<- matrix(0, nrow=1074, ncol=3)
colnames(num.mat)<- number
for(z in 1:nrow(num.mat)){
num.mat[z,which(colnames(num.mat)==svdat$cond.money[z])]<- 1
}
num.mat.final<- num.mat[,-1]
stage.mat<- matrix(0, nrow=1074, ncol=4)
colnames(stage.mat)<- request
for(z in 1:nrow(stage.mat)){
stage.mat[z,which(colnames(stage.mat)==svdat$cond.stage[z])]<- 1
}
stage.mat.final<- stage.mat[,-1]
party.mat<- matrix(0, nrow=1074, ncol=3)
colnames(party.mat)<- party
for(z in 1:nrow(party.mat)){
party.mat[z, which(colnames(party.mat)==svdat$cond.party[z])]<- 1
}
party.mat.final<- party.mat[,-1]
along.mat<- matrix(0, nrow=1074, ncol=4)
colnames(along.mat)<- 	along
for(z in 1:nrow(along.mat)){
along.mat[z,which(colnames(along.mat)==svdat$cond.alongWith[z])]<- 1
}
along.mat.final<- along.mat[,-1]
=======
treat<- treats #line 448 of rep code
>>>>>>> bf7998bd49f5b12b9a6b3cbe6c67a57a4f70aeca
treats<- cbind(type.mat.final, num.mat.final[,1], stage.mat.final[,1:2],party.mat.final[,1],
along.mat.final[,1:2], type.mat.final[,1:5]*num.mat.final[,1], type.mat.final[,1:5]*stage.mat.final[,1],
type.mat.final[,1:5]*stage.mat.final[,2], type.mat.final[,1:5]*party.mat.final[,1], type.mat.final[,1:5]*along.mat.final[,1],
type.mat.final[,1:5]*along.mat.final[,2], num.mat.final[,1]*stage.mat.final[,1], num.mat.final[,1]*stage.mat.final[,2],
num.mat.final[,1]*party.mat.final[,1], num.mat.final[,1]*along.mat.final[,1], num.mat.final[,1]*along.mat.final[,2],
stage.mat.final[,1:2]*party.mat.final[,1], stage.mat.final[,1:2]*along.mat.final[,1],
stage.mat.final[,1:2]*along.mat.final[,2], party.mat.final[,1]*along.mat.final[,1], party.mat.final[,1]*along.mat.final[,2] )
<<<<<<< HEAD
treat<- treats #line 448 of rep code
### Defining the X variable
covs<- cbind(dem, rep, lib, cons) #line 373 of rep code
X <- covs #line 432 of repcode
Xfull <- model.matrix(~X*treat)
## line 391 of rep code
#Defining the Y variable
#line 432 of rep code
Y<- approve_bi<- ifelse(svdat$approval<3, 1, 0) #line 292 of rep code
covstest_1 <- covs[c(1:107),]
covstest_2<- covs[c(108:215),]
covstest_3<- covs[c(216:323),]
covstest_4<- covs[c(324:431),]
covstest_5<- covs[c(432:539),]
covstest_6<- covs[c(540:647),]
covstest_7<- covs[c(648:755),]
covstest_8<- covs[c(756:863),]
covstest_9<- covs[c(864:971),]
covstest_10<- covs[c(972:1074),]
covsfull_1 <- covs[-covstest_1,]
covsfull_2 <- covs[-covstest_2,]
covsfull_3 <- covs[-covstest_3,]
covsfull_4 <- covs[-covstest_4,]
covsfull_5 <- covs[-covstest_5,]
covsfull_6 <- covs[-covstest_6,]
covsfull_7 <- covs[-covstest_7,]
covsfull_8 <- covs[-covstest_8,]
covsfull_9 <- covs[-covstest_9,]
covsfull_10 <- covs[-covstest_10,]
####def of 1/10 for treat
treattest_1 <- treat[c(1:107),]
treattest_2<- treat[c(108:215),]
treattest_3<- treat[c(216:323),]
treattest_4<-treat[c(324:431),]
treattest_5<- treat[c(432:539),]
treattest_6<- treat[c(540:647),]
treattest_7<- treat[c(648:755),]
treattest_8<- treat[c(756:863),]
treattest_9<- treat[c(864:971),]
treattest_10<- treat[c(972:1074),]
treatfull_1 <-treat[-treattest_1,]
treatfull_2 <- treat[-treattest_2,]
treatfull_3 <- treat[-treattest_3,]
treatfull_4 <- treat[-treattest_4,]
treatfull_5 <- treat[-treattest_5,]
treatfull_6 <- treat[-treattest_6,]
treatfull_7 <- treat[-treattest_7,]
treatfull_8 <- treat[-treattest_8,]
treatfull_9 <- treat[-treattest_9,]
treatfull_10 <- treat[-treattest_10,]
Yfull_1<- ifelse(svdat[-c(1:107),]$approval<3, 1, 0)
Yfull_2<- ifelse(svdat[-c(108:215),]$approval<3, 1, 0)
Yfull_3<- ifelse(svdat[-c(216:323),]$approval<3, 1, 0)
Yfull_4<- ifelse(svdat[-c(324:431),]$approval<3, 1, 0)
Yfull_5<- ifelse(svdat[-c(432:539),]$approval<3, 1, 0)
Yfull_6<- ifelse(svdat[-c(540:647),]$approval<3, 1, 0)
Yfull_7<- ifelse(svdat[-c(648:755),]$approval<3, 1, 0)
Yfull_8<- ifelse(svdat[-c(756:863),]$approval<3, 1, 0)
Yfull_9<- ifelse(svdat[-c(864:971),]$approval<3, 1, 0)
Yfull_10<- ifelse(svdat[-c(972:1074),]$approval<3, 1, 0)
Xfull <- model.matrix(~covs*treat)
Xfull_1 <-model.matrix(~covsfull_1*treatfull_1)
xtest<- model.matrix(~covstest_1*treattest_1)
fit8<- bart(x.train=Xfull, y.train=factor(Y), x.test=Xtfull, ndpost=1000, nskip=500, usequants=T)
library(BayesTree)
fit8<- bart(x.train=Xfull, y.train=factor(Y), x.test=Xtfull, ndpost=1000, nskip=500, usequants=T)
Xfull<-Xtfull <- model.matrix(~covs*treat)
fit8<- bart(x.train=Xfull, y.train=factor(Y), x.test=Xtfull, ndpost=1000, nskip=500, usequants=T)
nrow(Yfull_1)
Yfull_1<- ifelse(svdat[-c(1:107),]$approval<3, 1, 0)
nrow(Yfull_1)
covstest_1 <- covs[c(0:107),]
treattest_1 <- treat[c(0:107),]
Yfull_1<- ifelse(svdat[-c(0:107),]$approval<3, 1, 0)
covstest_1 <- covs[c(0:107),]
covstest_2<- covs[c(108:215),]
covstest_3<- covs[c(216:323),]
covstest_4<- covs[c(324:431),]
covstest_5<- covs[c(432:539),]
covstest_6<- covs[c(540:647),]
covstest_7<- covs[c(648:755),]
covstest_8<- covs[c(756:863),]
covstest_9<- covs[c(864:971),]
covstest_10<- covs[c(972:1074),]
covsfull_1 <- covs[-covstest_1,]
covsfull_2 <- covs[-covstest_2,]
covsfull_3 <- covs[-covstest_3,]
covsfull_4 <- covs[-covstest_4,]
covsfull_5 <- covs[-covstest_5,]
covsfull_6 <- covs[-covstest_6,]
covsfull_7 <- covs[-covstest_7,]
covsfull_8 <- covs[-covstest_8,]
covsfull_9 <- covs[-covstest_9,]
covsfull_10 <- covs[-covstest_10,]
treattest_1 <- treat[c(0:107),]
treattest_2<- treat[c(108:215),]
treattest_3<- treat[c(216:323),]
treattest_4<-treat[c(324:431),]
treattest_5<- treat[c(432:539),]
treattest_6<- treat[c(540:647),]
treattest_7<- treat[c(648:755),]
treattest_8<- treat[c(756:863),]
treattest_9<- treat[c(864:971),]
treattest_10<- treat[c(972:1074),]
treatfull_1 <-treat[-treattest_1,]
treatfull_2 <- treat[-treattest_2,]
treatfull_3 <- treat[-treattest_3,]
treatfull_4 <- treat[-treattest_4,]
treatfull_5 <- treat[-treattest_5,]
treatfull_6 <- treat[-treattest_6,]
treatfull_7 <- treat[-treattest_7,]
treatfull_8 <- treat[-treattest_8,]
treatfull_9 <- treat[-treattest_9,]
treatfull_10 <- treat[-treattest_10,]
Yfull_1<- ifelse(svdat[-c(0:107),]$approval<3, 1, 0)
Yfull_2<- ifelse(svdat[-c(108:215),]$approval<3, 1, 0)
Yfull_3<- ifelse(svdat[-c(216:323),]$approval<3, 1, 0)
Yfull_4<- ifelse(svdat[-c(324:431),]$approval<3, 1, 0)
Yfull_5<- ifelse(svdat[-c(432:539),]$approval<3, 1, 0)
Yfull_6<- ifelse(svdat[-c(540:647),]$approval<3, 1, 0)
Yfull_7<- ifelse(svdat[-c(648:755),]$approval<3, 1, 0)
Yfull_8<- ifelse(svdat[-c(756:863),]$approval<3, 1, 0)
Yfull_9<- ifelse(svdat[-c(864:971),]$approval<3, 1, 0)
Yfull_10<- ifelse(svdat[-c(972:1074),]$approval<3, 1, 0)
Xfull_1 <-model.matrix(~covsfull_1*treatfull_1)
xtest_1<- model.matrix(~covstest_1*treattest_1)
fit8<- bart(x.train=Xfull_1, y.train=factor(Yfull_1), x.test=xtest_1, ndpost=1000, nskip=500, usequants=T)
covsfull_1
treatfull_1
covs
treat
covstest_1 <- covs[c(0:107),]
covsfull_1 <- covs[-covstest_1,]
treattest_1 <- treat[c(0:107),]
treatfull_1 <-treat[-treattest_1,]
xtest_1<- model.matrix(~covstest_1*treattest_1)
fit8<- bart(x.train=Xfull_1, y.train=factor(Yfull_1), x.test=xtest_1, ndpost=1000, nskip=500, usequants=T)
=======
library(glmnet)
fit1<- cv.glmnet(y = Y, x= Xfull, alpha=1, family='binomial', type='mse')
fit1<- cv.glmnet(y = Y, x= Xfull, alpha=1, family='binomial', type='mse')
approve_bi <- y #line 432 of rep code
approve_bi<- ifelse(svdat$approval<3, 1, 0) #line 292 of rep code
approve_bi <- y #line 432 of rep code
approve_bi <- y #line 432 of rep code
FIY <- Y
Xfull <- model.matrix(~X*treat)
Xtfull <- model.matrix(~Xt*treatt) #line 56 of SLF
rm(list=ls(all=TRUE))
dem<- ifelse(svdat$pid3l=='Dem', 1, 0)  #line 366-369 of rep code
getwd()
load(Het_Experiment.R)
load(Het_Experiment.RData)
load("Het_Experiment.RData")
dem<- ifelse(svdat$pid3l=='Dem', 1, 0)  #line 366-369 of rep code
dem[which(is.na(dem))]<- 0
rep<- ifelse(svdat$pid3l=='Rep', 1, 0)
rep[which(is.na(rep))]<- 0
cons<- ifelse(svdat$ideo3<3, 1, 0) #line 230-231 of rep code
lib<- ifelse(svdat$ideo3==4|svdat$ideo3==5, 1, 0)
lib[which(is.na(lib))]<- 0 #line 370-371 of rep code
cons[which(is.na(cons))]<- 0
treat<- treats #line 448 of rep code
type.mat<- matrix(0, nrow = 1074, ncol=7)
colnames(type.mat)<- sort(unique(as.character(svdat$cond.type)))
for(z in 1:nrow(type.mat)){
type.mat[z,which(colnames(type.mat)==svdat$cond.type[z])]<- 1}
treat<- treats #line 448 of rep code
type.mat<- matrix(0, nrow = 1074, ncol=7)
colnames(type.mat)<- sort(unique(as.character(svdat$cond.type)))
for(z in 1:nrow(type.mat)){
type.mat[z,which(colnames(type.mat)==svdat$cond.type[z])]<- 1}
type.mat.final<- type.mat[,-1]
num.mat<- matrix(0, nrow=1074, ncol=3)
colnames(num.mat)<- number
for(z in 1:nrow(num.mat)){
num.mat[z,which(colnames(num.mat)==svdat$cond.money[z])]<- 1
}
num.mat.final<- num.mat[,-1]
stage.mat<- matrix(0, nrow=1074, ncol=4)
colnames(stage.mat)<- request
for(z in 1:nrow(stage.mat)){
stage.mat[z,which(colnames(stage.mat)==svdat$cond.stage[z])]<- 1
}
stage.mat.final<- stage.mat[,-1]
party.mat<- matrix(0, nrow=1074, ncol=3)
colnames(party.mat)<- party
for(z in 1:nrow(party.mat)){
party.mat[z, which(colnames(party.mat)==svdat$cond.party[z])]<- 1
}
party.mat.final<- party.mat[,-1]
along.mat<- matrix(0, nrow=1074, ncol=4)
colnames(along.mat)<- 	along
for(z in 1:nrow(along.mat)){
along.mat[z,which(colnames(along.mat)==svdat$cond.alongWith[z])]<- 1
}
along.mat.final<- along.mat[,-1]
types<- sort(unique(as.character(svdat$cond.type)))
type.num<- match(svdat$cond.type, types)
number<- c('control', '$20 million', '$50 thousand')
amount.num<- match(svdat$cond.money, number)
request<- c('control', 'requested', 'secured', 'will request')
stage.num<- match(svdat$cond.stage, request)
party<- c('control', 'a Republican', 'a Democrat')
party.num<- match(svdat$cond.party, party)
along<- c('control', 'alone', 'w/ Rep', 'w/ Dem')
along.num<- match(svdat$cond.alongWith, along)
treats<- cbind(type.mat.final, num.mat.final[,1], stage.mat.final[,1:2],party.mat.final[,1],
along.mat.final[,1:2], type.mat.final[,1:5]*num.mat.final[,1], type.mat.final[,1:5]*stage.mat.final[,1],
type.mat.final[,1:5]*stage.mat.final[,2], type.mat.final[,1:5]*party.mat.final[,1], type.mat.final[,1:5]*along.mat.final[,1],
type.mat.final[,1:5]*along.mat.final[,2], num.mat.final[,1]*stage.mat.final[,1], num.mat.final[,1]*stage.mat.final[,2],
num.mat.final[,1]*party.mat.final[,1], num.mat.final[,1]*along.mat.final[,1], num.mat.final[,1]*along.mat.final[,2],
stage.mat.final[,1:2]*party.mat.final[,1], stage.mat.final[,1:2]*along.mat.final[,1],
stage.mat.final[,1:2]*along.mat.final[,2], party.mat.final[,1]*along.mat.final[,1], party.mat.final[,1]*along.mat.final[,2] )
treats<- cbind(type.mat.final, num.mat.final[,1], stage.mat.final[,1:2],party.mat.final[,1],
along.mat.final[,1:2], type.mat.final[,1:5]*num.mat.final[,1], type.mat.final[,1:5]*stage.mat.final[,1],
type.mat.final[,1:5]*stage.mat.final[,2], type.mat.final[,1:5]*party.mat.final[,1], type.mat.final[,1:5]*along.mat.final[,1],
type.mat.final[,1:5]*along.mat.final[,2], num.mat.final[,1]*stage.mat.final[,1], num.mat.final[,1]*stage.mat.final[,2],
num.mat.final[,1]*party.mat.final[,1], num.mat.final[,1]*along.mat.final[,1], num.mat.final[,1]*along.mat.final[,2],
stage.mat.final[,1:2]*party.mat.final[,1], stage.mat.final[,1:2]*along.mat.final[,1],
stage.mat.final[,1:2]*along.mat.final[,2], party.mat.final[,1]*along.mat.final[,1], party.mat.final[,1]*along.mat.final[,2] )
Y<- approve_bi<- ifelse(svdat$approval<3, 1, 0) #line 292 of rep code
Xfull <- model.matrix(~X*treat)
X <- covs #line 432 of repcode
covs<- cbind(dem, rep, lib, cons) #line 373 of rep code
X <- covs #line 432 of repcode
Xfull <- model.matrix(~X*treat)
treat<- treats #line 448 of rep code
Xfull <- model.matrix(~X*treat)
X <- covs #line 432 of repcode
covs<- cbind(dem, rep, lib, cons) #line 373 of rep code
install.packages("glmnet")
library(glmnet)
install.packages("glmnet")
fit1<- cv.glmnet(y = Y, x= Xfull, alpha=1, family='binomial', type='mse')
install.packages("glmnet")
fit2<- cv.glmnet(y = Y, x= Xfull, alpha=0.5, family='binomial', type='mse')
fit3<- cv.glmnet(y = Y, x= Xfull, alpha=0.15, family='binomial', type='mse')
fit4<- cv.glmnet(y = Y, x= Xfull, alpha=0, family='binomial', type='mse')
library(KRLS)
fit11<- krls(X = Xfull[,-1], y = Y, derivative=F)
library(KRLS)
fit11<- krls(X = Xfull[,-1], y = Y, derivative=F)
fit5 <- FindIt(FIY,X.c=Xstd, treat2, type='multiple',
scale.c= SDsToRescaleX,
search.lambdas=TRUE,
fit.glmnet=TRUE,wts=1) }
install.packages("arm")
library(arm)
fit6<- bayesglm(Y~Xfull-1, family=binomial(link=logit))
install.packages("mboost")
install.packages("GAMBoost")
library(mboost)
library(GAMBoost)
fit7<- GLMBoost(Xfull[,-1],Y,penalty= 100,stepno=100,  trace = T,  family=binomial())
install.packages("mboost")
install.packages("mboost")
library(mboost)
library(GAMBoost)
fit7<- GLMBoost(Xfull[,-1],Y,penalty= 100,stepno=100,  trace = T,  family=binomial())
>>>>>>> bf7998bd49f5b12b9a6b3cbe6c67a57a4f70aeca
